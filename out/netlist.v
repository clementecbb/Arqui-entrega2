/* Generated by Yosys 0.33 (git sha1 2584903a060) */

(* src = "alu.v:2.1-26.10" *)
module alu(a, b, s, out);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  (* src = "alu.v:3.16-3.17" *)
  input [7:0] a;
  wire [7:0] a;
  (* src = "alu.v:3.19-3.20" *)
  input [7:0] b;
  wire [7:0] b;
  (* src = "alu.v:5.16-5.19" *)
  output [7:0] out;
  wire [7:0] out;
  (* src = "alu.v:4.16-4.17" *)
  input [2:0] s;
  wire [2:0] s;
  assign _130_ = a[0] | b[0];
  assign _131_ = a[0] & b[0];
  assign _132_ = _130_ & ~(_131_);
  assign _133_ = ~s[2];
  assign _134_ = ~(s[1] & s[0]);
  assign _135_ = _134_ | _133_;
  assign _136_ = s[0] | ~(s[1]);
  assign _137_ = _136_ | _133_;
  assign _138_ = _137_ & _135_;
  assign _139_ = s[1] | ~(s[0]);
  assign _140_ = s[2] & ~(_139_);
  assign _141_ = s[1] | s[0];
  assign _142_ = _141_ | _133_;
  assign _143_ = _140_ | ~(_142_);
  assign _144_ = _138_ & ~(_143_);
  assign _145_ = _133_ & ~(_134_);
  assign _146_ = _133_ & ~(_136_);
  assign _147_ = _146_ | _145_;
  assign _148_ = _144_ & ~(_147_);
  assign _149_ = a[1] & ~(_135_);
  assign _150_ = ~(a[0] ^ b[0]);
  assign _151_ = _140_ & ~(_150_);
  assign _152_ = ~(_142_ | a[0]);
  assign _153_ = _152_ | _151_;
  assign _154_ = _153_ | _149_;
  assign _155_ = _145_ & _130_;
  assign _156_ = _146_ & _131_;
  assign _157_ = _156_ | _155_;
  assign _158_ = _157_ | _154_;
  assign out[0] = _148_ ? _132_ : _158_;
  assign _159_ = ~a[1];
  assign _160_ = _133_ & ~(_139_);
  assign _161_ = ~(b[0] ^ b[1]);
  assign _162_ = ~_161_;
  assign _163_ = _160_ ? b[1] : _162_;
  assign _164_ = _163_ ^ _159_;
  assign _165_ = b[0] & ~(a[0]);
  assign _166_ = ~(_165_ ^ _164_);
  assign _167_ = a[2] & ~(_135_);
  assign _168_ = a[0] & ~(_137_);
  assign _169_ = _168_ | _167_;
  assign _170_ = ~(a[1] ^ b[1]);
  assign _171_ = _140_ & ~(_170_);
  assign _172_ = _159_ & ~(_142_);
  assign _173_ = _172_ | _171_;
  assign _174_ = _173_ | _169_;
  assign _175_ = ~(a[1] | b[1]);
  assign _176_ = _145_ & ~(_175_);
  assign _177_ = ~(a[1] & b[1]);
  assign _178_ = _146_ & ~(_177_);
  assign _179_ = _178_ | _176_;
  assign _180_ = _179_ | _174_;
  assign out[1] = _148_ ? _166_ : _180_;
  assign _181_ = ~a[2];
  assign _182_ = ~b[2];
  assign _183_ = ~(b[0] | b[1]);
  assign _184_ = _183_ ^ b[2];
  assign _185_ = _160_ ? _182_ : _184_;
  assign _186_ = _185_ ^ _181_;
  assign _187_ = a[1] & ~(_163_);
  assign _188_ = _164_ & ~(_165_);
  assign _189_ = _188_ | _187_;
  assign _190_ = ~(_189_ ^ _186_);
  assign _191_ = a[3] & ~(_135_);
  assign _192_ = a[1] & ~(_137_);
  assign _193_ = _192_ | _191_;
  assign _194_ = ~(a[2] ^ b[2]);
  assign _195_ = _140_ & ~(_194_);
  assign _196_ = _181_ & ~(_142_);
  assign _197_ = _196_ | _195_;
  assign _198_ = _197_ | _193_;
  assign _199_ = ~(a[2] | b[2]);
  assign _000_ = _145_ & ~(_199_);
  assign _001_ = ~(a[2] & b[2]);
  assign _002_ = _146_ & ~(_001_);
  assign _003_ = _002_ | _000_;
  assign _004_ = _003_ | _198_;
  assign out[2] = _148_ ? _190_ : _004_;
  assign _005_ = ~a[3];
  assign _006_ = ~b[3];
  assign _007_ = _183_ & ~(b[2]);
  assign _008_ = _007_ ^ b[3];
  assign _009_ = _160_ ? _006_ : _008_;
  assign _010_ = _009_ ^ _005_;
  assign _011_ = ~(_185_ & a[2]);
  assign _012_ = _189_ & ~(_186_);
  assign _013_ = _011_ & ~(_012_);
  assign _014_ = _013_ ^ _010_;
  assign _015_ = a[4] & ~(_135_);
  assign _016_ = a[2] & ~(_137_);
  assign _017_ = _016_ | _015_;
  assign _018_ = ~(a[3] ^ b[3]);
  assign _019_ = _140_ & ~(_018_);
  assign _020_ = _005_ & ~(_142_);
  assign _021_ = _020_ | _019_;
  assign _022_ = _021_ | _017_;
  assign _023_ = ~(a[3] | b[3]);
  assign _024_ = _145_ & ~(_023_);
  assign _025_ = ~(a[3] & b[3]);
  assign _026_ = _146_ & ~(_025_);
  assign _027_ = _026_ | _024_;
  assign _028_ = _027_ | _022_;
  assign out[3] = _148_ ? _014_ : _028_;
  assign _029_ = ~a[4];
  assign _030_ = ~b[4];
  assign _031_ = b[3] | b[2];
  assign _032_ = _183_ & ~(_031_);
  assign _033_ = _032_ ^ b[4];
  assign _034_ = _160_ ? _030_ : _033_;
  assign _035_ = _034_ ^ _029_;
  assign _036_ = ~(_009_ & a[3]);
  assign _037_ = ~(_011_ | _010_);
  assign _038_ = _036_ & ~(_037_);
  assign _039_ = _010_ | _186_;
  assign _040_ = _189_ & ~(_039_);
  assign _041_ = _038_ & ~(_040_);
  assign _042_ = _041_ ^ _035_;
  assign _043_ = a[5] & ~(_135_);
  assign _044_ = a[3] & ~(_137_);
  assign _045_ = _044_ | _043_;
  assign _046_ = ~(a[4] ^ b[4]);
  assign _047_ = _140_ & ~(_046_);
  assign _048_ = _029_ & ~(_142_);
  assign _049_ = _048_ | _047_;
  assign _050_ = _049_ | _045_;
  assign _051_ = ~(a[4] | b[4]);
  assign _052_ = _145_ & ~(_051_);
  assign _053_ = ~(a[4] & b[4]);
  assign _054_ = _146_ & ~(_053_);
  assign _055_ = _054_ | _052_;
  assign _056_ = _055_ | _050_;
  assign out[4] = _148_ ? _042_ : _056_;
  assign _057_ = ~a[5];
  assign _058_ = ~b[5];
  assign _059_ = _032_ & ~(b[4]);
  assign _060_ = _059_ ^ b[5];
  assign _061_ = _160_ ? _058_ : _060_;
  assign _062_ = _061_ ^ _057_;
  assign _063_ = ~(_034_ & a[4]);
  assign _064_ = ~(_041_ | _035_);
  assign _065_ = _063_ & ~(_064_);
  assign _066_ = _065_ ^ _062_;
  assign _067_ = a[6] & ~(_135_);
  assign _068_ = a[4] & ~(_137_);
  assign _069_ = _068_ | _067_;
  assign _070_ = ~(a[5] ^ b[5]);
  assign _071_ = _140_ & ~(_070_);
  assign _072_ = _057_ & ~(_142_);
  assign _073_ = _072_ | _071_;
  assign _074_ = _073_ | _069_;
  assign _075_ = ~(a[5] | b[5]);
  assign _076_ = _145_ & ~(_075_);
  assign _077_ = ~(a[5] & b[5]);
  assign _078_ = _146_ & ~(_077_);
  assign _079_ = _078_ | _076_;
  assign _080_ = _079_ | _074_;
  assign out[5] = _148_ ? _066_ : _080_;
  assign _081_ = ~b[6];
  assign _082_ = b[5] | b[4];
  assign _083_ = _032_ & ~(_082_);
  assign _084_ = _083_ ^ b[6];
  assign _085_ = _160_ ? _081_ : _084_;
  assign _086_ = _085_ ^ a[6];
  assign _087_ = ~(_061_ & a[5]);
  assign _088_ = ~(_063_ | _062_);
  assign _089_ = _087_ & ~(_088_);
  assign _090_ = _062_ | _035_;
  assign _091_ = ~(_090_ | _041_);
  assign _092_ = _089_ & ~(_091_);
  assign _093_ = ~(_092_ ^ _086_);
  assign _094_ = a[7] & ~(_135_);
  assign _095_ = a[5] & ~(_137_);
  assign _096_ = _095_ | _094_;
  assign _097_ = ~(a[6] ^ b[6]);
  assign _098_ = _140_ & ~(_097_);
  assign _099_ = ~(_142_ | a[6]);
  assign _100_ = _099_ | _098_;
  assign _101_ = _100_ | _096_;
  assign _102_ = ~(a[6] | b[6]);
  assign _103_ = _145_ & ~(_102_);
  assign _104_ = ~(a[6] & b[6]);
  assign _105_ = _146_ & ~(_104_);
  assign _106_ = _105_ | _103_;
  assign _107_ = _106_ | _101_;
  assign out[6] = _148_ ? _093_ : _107_;
  assign _108_ = ~a[7];
  assign _109_ = ~b[7];
  assign _110_ = _083_ & ~(b[6]);
  assign _111_ = _110_ ^ b[7];
  assign _112_ = _160_ ? _109_ : _111_;
  assign _113_ = _112_ ^ _108_;
  assign _114_ = ~(_085_ & a[6]);
  assign _115_ = _086_ & ~(_092_);
  assign _116_ = _114_ & ~(_115_);
  assign _117_ = _116_ ^ _113_;
  assign _118_ = a[6] & ~(_137_);
  assign _119_ = ~(a[7] ^ b[7]);
  assign _120_ = _140_ & ~(_119_);
  assign _121_ = _108_ & ~(_142_);
  assign _122_ = _121_ | _120_;
  assign _123_ = _122_ | _118_;
  assign _124_ = ~(a[7] | b[7]);
  assign _125_ = _145_ & ~(_124_);
  assign _126_ = ~(a[7] & b[7]);
  assign _127_ = _146_ & ~(_126_);
  assign _128_ = _127_ | _125_;
  assign _129_ = _128_ | _123_;
  assign out[7] = _148_ ? _117_ : _129_;
endmodule

(* src = "computer.v:2.1-89.10" *)
module computer(clk, alu_out_bus);
  (* src = "computer.v:17.17-17.23" *)
  wire LA_sig;
  (* src = "computer.v:17.25-17.31" *)
  wire LB_sig;
  (* src = "computer.v:18.25-18.31" *)
  wire [1:0] SA_sig;
  (* src = "computer.v:18.17-18.23" *)
  wire [1:0] SB_sig;
  (* src = "computer.v:4.16-4.27" *)
  output [7:0] alu_out_bus;
  wire [7:0] alu_out_bus;
  (* src = "computer.v:19.17-19.26" *)
  wire [2:0] alu_s_sig;
  (* src = "computer.v:3.9-3.12" *)
  input clk;
  wire clk;
  (* src = "computer.v:22.17-22.23" *)
  wire [7:0] const0;
  (* src = "computer.v:23.17-23.23" *)
  wire [7:0] const1;
  (* src = "computer.v:8.17-8.27" *)
  wire [7:0] dm_out_bus;
  (* src = "computer.v:9.17-9.27" *)
  wire [14:0] im_out_bus;
  (* src = "computer.v:27.17-27.19" *)
  wire [7:0] k8;
  (* src = "computer.v:13.17-13.29" *)
  wire [7:0] muxA_out_bus;
  (* src = "computer.v:14.17-14.29" *)
  wire [7:0] muxB_out_bus;
  (* src = "computer.v:26.17-26.23" *)
  wire [6:0] opcode;
  (* src = "computer.v:7.17-7.27" *)
  wire [3:0] pc_out_bus;
  (* src = "computer.v:11.17-11.29" *)
  wire [7:0] regA_out_bus;
  (* src = "computer.v:12.17-12.29" *)
  wire [7:0] regB_out_bus;
  (* module_not_derived = 32'd1 *)
  (* src = "computer.v:82.7-87.4" *)
  alu ALU (
    .a(muxA_out_bus),
    .b(muxB_out_bus),
    .out(alu_out_bus),
    .s(alu_s_sig)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "computer.v:31.16-38.4" *)
  control_unit CU (
    .LA(LA_sig),
    .LB(LB_sig),
    .SA(SA_sig),
    .SB(SB_sig),
    .alu_s(alu_s_sig),
    .opcode(im_out_bus[14:8])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "computer.v:45.22-48.4" *)
  instruction_memory IM (
    .address(pc_out_bus),
    .out(im_out_bus)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "computer.v:40.6-43.4" *)
  pc PC (
    .clk(clk),
    .pc(pc_out_bus)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "computer.v:64.8-71.4" *)
  mux4 muxA (
    .e0(regA_out_bus),
    .e1(regB_out_bus),
    .e2(8'h01),
    .e3(8'h00),
    .out(muxA_out_bus),
    .sel(SA_sig)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "computer.v:73.8-80.4" *)
  mux4 muxB (
    .e0(regB_out_bus),
    .e1(8'h00),
    .e2(im_out_bus[7:0]),
    .e3(8'h00),
    .out(muxB_out_bus),
    .sel(SB_sig)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "computer.v:50.12-55.4" *)
  register regA (
    .clk(clk),
    .data(alu_out_bus),
    .load(LA_sig),
    .out(regA_out_bus)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "computer.v:57.12-62.4" *)
  register regB (
    .clk(clk),
    .data(alu_out_bus),
    .load(LB_sig),
    .out(regB_out_bus)
  );
  assign const0 = 8'h00;
  assign const1 = 8'h01;
  assign dm_out_bus = 8'h00;
  assign k8 = im_out_bus[7:0];
  assign opcode = im_out_bus[14:8];
endmodule

(* src = "control_unit.v:2.1-320.10" *)
module control_unit(opcode, LA, LB, SA, SB, alu_s);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  (* src = "control_unit.v:4.16-4.18" *)
  output LA;
  wire LA;
  (* src = "control_unit.v:5.16-5.18" *)
  output LB;
  wire LB;
  (* src = "control_unit.v:6.16-6.18" *)
  output [1:0] SA;
  wire [1:0] SA;
  (* src = "control_unit.v:7.16-7.18" *)
  output [1:0] SB;
  wire [1:0] SB;
  (* src = "control_unit.v:8.16-8.21" *)
  output [2:0] alu_s;
  wire [2:0] alu_s;
  (* src = "control_unit.v:11.13-11.17" *)
  wire la_r;
  (* src = "control_unit.v:12.13-12.17" *)
  wire lb_r;
  (* src = "control_unit.v:3.16-3.22" *)
  input [6:0] opcode;
  wire [6:0] opcode;
  (* src = "control_unit.v:16.13-16.16" *)
  wire [2:0] s_r;
  (* src = "control_unit.v:13.13-13.17" *)
  wire [1:0] sa_r;
  (* src = "control_unit.v:14.13-14.17" *)
  wire [1:0] sb_r;
  assign _000_ = ~opcode[6];
  assign _001_ = ~opcode[0];
  assign _002_ = ~opcode[4];
  assign _003_ = ~opcode[1];
  assign _004_ = opcode[2] ? _003_ : _001_;
  assign _005_ = opcode[4] ? _004_ : _001_;
  assign _006_ = ~opcode[2];
  assign _007_ = opcode[0] | opcode[1];
  assign _008_ = opcode[2] ? _007_ : _003_;
  assign _009_ = _008_ | opcode[3];
  assign _010_ = _009_ | opcode[4];
  assign _011_ = opcode[5] ? _010_ : _005_;
  assign LB = _000_ & ~(_011_);
  assign _012_ = opcode[2] ? opcode[1] : opcode[0];
  assign _013_ = opcode[4] ? _012_ : opcode[0];
  assign _014_ = opcode[2] | opcode[1];
  assign _015_ = _014_ | opcode[3];
  assign _016_ = _015_ | opcode[4];
  assign _017_ = opcode[5] ? _016_ : _013_;
  assign LA = _000_ & ~(_017_);
  assign _018_ = ~(opcode[0] & opcode[1]);
  assign _019_ = opcode[0] ? _003_ : opcode[2];
  assign _020_ = opcode[3] ? _018_ : _019_;
  assign _021_ = opcode[2] ? _001_ : _018_;
  assign _022_ = opcode[4] ? _021_ : _020_;
  assign _023_ = opcode[2] | ~(opcode[0]);
  assign _024_ = _023_ | opcode[3];
  assign _025_ = _024_ | opcode[4];
  assign _026_ = opcode[5] ? _025_ : _022_;
  assign SA[0] = _000_ & ~(_026_);
  assign _027_ = opcode[0] & ~(opcode[1]);
  assign _028_ = _027_ | opcode[2];
  assign _029_ = _028_ | opcode[3];
  assign _030_ = _029_ | opcode[4];
  assign _031_ = _007_ | _006_;
  assign _032_ = _031_ | opcode[3];
  assign _033_ = _032_ | opcode[4];
  assign _034_ = opcode[5] ? _033_ : _030_;
  assign SA[1] = _000_ & ~(_034_);
  assign _035_ = opcode[1] | ~(opcode[0]);
  assign _036_ = _035_ | opcode[2];
  assign _037_ = _036_ | opcode[3];
  assign _038_ = _037_ | opcode[4];
  assign _039_ = _038_ | opcode[5];
  assign SB[0] = _000_ & ~(_039_);
  assign _040_ = opcode[2] | ~(opcode[1]);
  assign _041_ = ~(opcode[0] | opcode[1]);
  assign _042_ = opcode[2] ? _003_ : _041_;
  assign _043_ = opcode[3] ? _003_ : _042_;
  assign _044_ = opcode[4] ? _040_ : _043_;
  assign _045_ = _044_ | opcode[5];
  assign SB[1] = _000_ & ~(_045_);
  assign _046_ = opcode[4] | opcode[2];
  assign _047_ = opcode[4] & ~(opcode[2]);
  assign _048_ = _046_ & ~(_047_);
  assign _049_ = opcode[3] | opcode[2];
  assign _050_ = _049_ | opcode[4];
  assign _051_ = opcode[5] ? _050_ : _048_;
  assign alu_s[0] = _000_ & ~(_051_);
  assign _052_ = opcode[3] ^ opcode[2];
  assign _053_ = _052_ | opcode[4];
  assign _054_ = opcode[4] & ~(_052_);
  assign _055_ = _053_ & ~(_054_);
  assign _056_ = opcode[5] ? _050_ : _055_;
  assign alu_s[1] = _000_ & ~(_056_);
  assign _057_ = ~(opcode[3] | opcode[2]);
  assign _058_ = _057_ | _002_;
  assign _059_ = opcode[5] ? _050_ : _058_;
  assign alu_s[2] = _000_ & ~(_059_);
  assign la_r = LA;
  assign lb_r = LB;
  assign s_r = alu_s;
  assign sa_r = SA;
  assign sb_r = SB;
endmodule

(* src = "instruction_memory.v:2.1-12.10" *)
module instruction_memory(address, out);
  (* src = "instruction_memory.v:3.17-3.24" *)
  input [3:0] address;
  wire [3:0] address;
  (* src = "instruction_memory.v:4.17-4.20" *)
  output [14:0] out;
  wire [14:0] out;
  assign out = 15'hxxxx;
endmodule

(* src = "mux4.v:3.1-35.10" *)
module mux4(e0, e1, e2, e3, sel, out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  (* src = "mux4.v:4.20-4.22" *)
  input [7:0] e0;
  wire [7:0] e0;
  (* src = "mux4.v:4.24-4.26" *)
  input [7:0] e1;
  wire [7:0] e1;
  (* src = "mux4.v:4.28-4.30" *)
  input [7:0] e2;
  wire [7:0] e2;
  (* src = "mux4.v:4.32-4.34" *)
  input [7:0] e3;
  wire [7:0] e3;
  (* src = "mux4.v:6.20-6.23" *)
  output [7:0] out;
  wire [7:0] out;
  (* src = "mux4.v:5.20-5.23" *)
  input [1:0] sel;
  wire [1:0] sel;
  assign _00_ = ~(sel[0] | sel[1]);
  assign _01_ = ~(sel[0] & sel[1]);
  assign _02_ = e3[0] & ~(_01_);
  assign _03_ = sel[0] | ~(sel[1]);
  assign _04_ = e2[0] & ~(_03_);
  assign _05_ = _04_ | _02_;
  assign _06_ = sel[1] | ~(sel[0]);
  assign _07_ = e1[0] & ~(_06_);
  assign _08_ = _07_ | _05_;
  assign out[0] = _00_ ? e0[0] : _08_;
  assign _09_ = e3[1] & ~(_01_);
  assign _10_ = e2[1] & ~(_03_);
  assign _11_ = _10_ | _09_;
  assign _12_ = e1[1] & ~(_06_);
  assign _13_ = _12_ | _11_;
  assign out[1] = _00_ ? e0[1] : _13_;
  assign _14_ = e3[2] & ~(_01_);
  assign _15_ = e2[2] & ~(_03_);
  assign _16_ = _15_ | _14_;
  assign _17_ = e1[2] & ~(_06_);
  assign _18_ = _17_ | _16_;
  assign out[2] = _00_ ? e0[2] : _18_;
  assign _19_ = e3[3] & ~(_01_);
  assign _20_ = e2[3] & ~(_03_);
  assign _21_ = _20_ | _19_;
  assign _22_ = e1[3] & ~(_06_);
  assign _23_ = _22_ | _21_;
  assign out[3] = _00_ ? e0[3] : _23_;
  assign _24_ = e3[4] & ~(_01_);
  assign _25_ = e2[4] & ~(_03_);
  assign _26_ = _25_ | _24_;
  assign _27_ = e1[4] & ~(_06_);
  assign _28_ = _27_ | _26_;
  assign out[4] = _00_ ? e0[4] : _28_;
  assign _29_ = e3[5] & ~(_01_);
  assign _30_ = e2[5] & ~(_03_);
  assign _31_ = _30_ | _29_;
  assign _32_ = e1[5] & ~(_06_);
  assign _33_ = _32_ | _31_;
  assign out[5] = _00_ ? e0[5] : _33_;
  assign _34_ = e3[6] & ~(_01_);
  assign _35_ = e2[6] & ~(_03_);
  assign _36_ = _35_ | _34_;
  assign _37_ = e1[6] & ~(_06_);
  assign _38_ = _37_ | _36_;
  assign out[6] = _00_ ? e0[6] : _38_;
  assign _39_ = e3[7] & ~(_01_);
  assign _40_ = e2[7] & ~(_03_);
  assign _41_ = _40_ | _39_;
  assign _42_ = e1[7] & ~(_06_);
  assign _43_ = _42_ | _41_;
  assign out[7] = _00_ ? e0[7] : _43_;
endmodule

(* src = "pc.v:2.1-16.10" *)
module pc(clk, pc);
  wire _00_;
  wire _01_;
  (* force_downto = 32'd1 *)
  (* src = "pc.v:14.11-14.17|/usr/bin/../share/yosys/techmap.v:270.23-270.24" *)
  wire [3:0] _02_;
  (* force_downto = 32'd1 *)
  (* src = "pc.v:14.11-14.17|/usr/bin/../share/yosys/techmap.v:270.26-270.27" *)
  wire [3:0] _03_;
  (* src = "pc.v:3.9-3.12" *)
  input clk;
  wire clk;
  (* src = "pc.v:4.17-4.19" *)
  output [3:0] pc;
  reg [3:0] pc = 4'h0;
  assign _02_[0] = ~pc[0];
  assign _03_[1] = pc[1] ^ pc[0];
  assign _00_ = ~(pc[1] & pc[0]);
  assign _03_[2] = ~(_00_ ^ pc[2]);
  assign _01_ = pc[2] & ~(_00_);
  assign _03_[3] = _01_ ^ pc[3];
  (* src = "pc.v:13.3-15.6" *)
  always @(posedge clk)
    pc[0] <= _02_[0];
  (* src = "pc.v:13.3-15.6" *)
  always @(posedge clk)
    pc[1] <= _03_[1];
  (* src = "pc.v:13.3-15.6" *)
  always @(posedge clk)
    pc[2] <= _03_[2];
  (* src = "pc.v:13.3-15.6" *)
  always @(posedge clk)
    pc[3] <= _03_[3];
  assign _02_[3:1] = pc[3:1];
  assign _03_[0] = _02_[0];
endmodule

(* src = "register.v:2.1-20.10" *)
module register(clk, data, load, out);
  (* src = "register.v:3.9-3.12" *)
  input clk;
  wire clk;
  (* src = "register.v:4.16-4.20" *)
  input [7:0] data;
  wire [7:0] data;
  (* src = "register.v:3.14-3.18" *)
  input load;
  wire load;
  (* src = "register.v:5.16-5.19" *)
  output [7:0] out;
  reg [7:0] out = 8'h00;
  (* src = "register.v:15.3-19.6" *)
  always @(posedge clk)
    if (load) out[0] <= data[0];
  (* src = "register.v:15.3-19.6" *)
  always @(posedge clk)
    if (load) out[1] <= data[1];
  (* src = "register.v:15.3-19.6" *)
  always @(posedge clk)
    if (load) out[2] <= data[2];
  (* src = "register.v:15.3-19.6" *)
  always @(posedge clk)
    if (load) out[3] <= data[3];
  (* src = "register.v:15.3-19.6" *)
  always @(posedge clk)
    if (load) out[4] <= data[4];
  (* src = "register.v:15.3-19.6" *)
  always @(posedge clk)
    if (load) out[5] <= data[5];
  (* src = "register.v:15.3-19.6" *)
  always @(posedge clk)
    if (load) out[6] <= data[6];
  (* src = "register.v:15.3-19.6" *)
  always @(posedge clk)
    if (load) out[7] <= data[7];
endmodule
