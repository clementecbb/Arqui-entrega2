$date
	Wed Sep 24 22:52:56 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 8 ! alu_out_bus [7:0] $end
$var reg 1 " cl $end
$scope module Comp $end
$var wire 1 # SA_sig $end
$var wire 1 " clk $end
$var wire 8 $ regB_out_bus [7:0] $end
$var wire 8 % regA_out_bus [7:0] $end
$var wire 4 & pc_out_bus [3:0] $end
$var wire 8 ' muxB_out_bus [7:0] $end
$var wire 8 ( muxA_out_bus [7:0] $end
$var wire 8 ) imm8 [7:0] $end
$var wire 9 * im_out_bus [8:0] $end
$var wire 1 + cB_sig $end
$var wire 3 , alu_s_sig [2:0] $end
$var wire 8 - alu_out_bus [7:0] $end
$var wire 1 . LB_sig $end
$var wire 1 / LA_sig $end
$scope module ALU $end
$var wire 3 0 s [2:0] $end
$var wire 8 1 b [7:0] $end
$var wire 8 2 a [7:0] $end
$var reg 8 3 out [7:0] $end
$upscope $end
$scope module CU $end
$var wire 1 / LA $end
$var wire 1 . LB $end
$var wire 1 # SA $end
$var wire 3 4 alu_s [2:0] $end
$var wire 1 + cB $end
$var wire 1 5 lb $end
$var wire 1 6 la $end
$var wire 4 7 imm [3:0] $end
$var wire 9 8 im [8:0] $end
$var wire 1 9 c $end
$var wire 2 : S [1:0] $end
$var reg 3 ; s3 [2:0] $end
$upscope $end
$scope module IM $end
$var wire 9 < out [8:0] $end
$var wire 4 = address [3:0] $end
$upscope $end
$scope module PC $end
$var wire 1 " clk $end
$var reg 4 > pc [3:0] $end
$upscope $end
$scope module muxA $end
$var wire 1 # c $end
$var wire 8 ? e1 [7:0] $end
$var wire 8 @ e0 [7:0] $end
$var reg 8 A out [7:0] $end
$upscope $end
$scope module muxB $end
$var wire 1 + c $end
$var wire 8 B e1 [7:0] $end
$var wire 8 C e0 [7:0] $end
$var reg 8 D out [7:0] $end
$upscope $end
$scope module regA $end
$var wire 1 " clk $end
$var wire 8 E data [7:0] $end
$var wire 1 / load $end
$var reg 8 F out [7:0] $end
$upscope $end
$scope module regB $end
$var wire 1 " clk $end
$var wire 8 G data [7:0] $end
$var wire 1 . load $end
$var reg 8 H out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 H
b11 G
b0 F
b11 E
b11 D
b0 C
b11 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b110000011 <
b0 ;
b0 :
19
b110000011 8
b11 7
06
15
b0 4
b11 3
b0 2
b11 1
b0 0
0/
1.
b11 -
b0 ,
1+
b110000011 *
b11 )
b0 (
b11 '
b0 &
b0 %
b0 $
0#
0"
b11 !
$end
#1
b110 !
b110 -
b110 3
b110 E
b110 G
b110 '
b110 1
b110 D
b110 7
1/
16
0.
05
b110 )
b110 B
b101000110 *
b101000110 8
b101000110 <
b1 &
b1 =
b1 >
b11 $
b11 ?
b11 C
b11 H
1"
#2
0"
#3
b11 !
b11 -
b11 3
b11 E
b11 G
b1 ,
b1 0
b1 4
b1 ;
b11 '
b11 1
b11 D
b110 (
b110 2
b110 A
b0 7
b1 :
0/
06
1.
15
0+
09
b0 )
b0 B
b110 %
b110 @
b110 F
b10010000 *
b10010000 8
b10010000 <
b10 &
b10 =
b10 >
1"
#4
0"
#5
b10 !
b10 -
b10 3
b10 E
b10 G
b10 ,
b10 0
b10 4
b10 ;
b10 :
1/
16
0.
05
b1100000 *
b1100000 8
b1100000 <
b11 &
b11 =
b11 >
1"
#6
0"
#7
b11 !
b11 -
b11 3
b11 E
b11 G
b0 ,
b0 0
b0 4
b0 ;
b1 '
b1 1
b1 D
b10 (
b10 2
b10 A
b1 7
b0 :
1+
19
b1 )
b1 B
b10 %
b10 @
b10 F
b101000001 *
b101000001 8
b101000001 <
b100 &
b100 =
b100 >
1"
#8
0"
#9
b100 !
b100 -
b100 3
b100 E
b100 G
bx 7
bx :
x/
x6
x.
x5
x+
x9
b0xxxx )
b0xxxx B
b11 (
b11 2
b11 A
bx *
bx 8
bx <
b101 &
b101 =
b101 >
b11 %
b11 @
b11 F
1"
